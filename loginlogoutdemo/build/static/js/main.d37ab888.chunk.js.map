{"version":3,"sources":["services/LoginService.js","component/Login.js","component/Logout.js","component/Admin.js","component/SecondPage.js","component/ThirdPage.js","App.js","serviceWorker.js","index.js"],"names":["username","password","user","uname","pass","axios","post","login","props","loggedIn","localStorage","getItem","state","onChange","bind","LoginForm","e","this","setState","target","name","value","preventDefault","message","role","LoginService","checkLogin","then","res","data","setItem","alert","to","type","placeholder","onClick","Component","Logout","removeItem","Admin","SecondPage","ThirdPage","App","exact","path","component","Login","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d37ab888.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst EMPLOYEE_API_BASE_URL = \"http://localhost:4000/login\";\r\n\r\nclass LoginSrvice {\r\n\r\n    checkLogin(username,password){\r\n        const user = {\r\n            uname : username,\r\n            pass : password\r\n        }\r\n        //return axios.get(EMPLOYEE_API_BASE_URL + username + \"/\" + password );\r\n        return axios.post(EMPLOYEE_API_BASE_URL, user); \r\n    }\r\n    \r\n}\r\n\r\nexport default new LoginSrvice();","import React, { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport LoginService from '../services/LoginService';\r\n\r\n\r\nclass login extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        const token = localStorage.getItem(\"token\")\r\n        let loggedIn = true;\r\n        if(token === null){\r\n            loggedIn = false\r\n        }\r\n        this.state = {\r\n            username: \"\",\r\n            password: \"\",\r\n            loggedIn\r\n        }\r\n        this.onChange = this.onChange.bind(this);\r\n        this.LoginForm = this.LoginForm.bind(this);\r\n    }\r\n    onChange(e){\r\n        this.setState({\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    LoginForm(e){\r\n        e.preventDefault()\r\n        let message = \"\";\r\n        let role = \"\";\r\n        const {username,password} = this.state\r\n        LoginService.checkLogin(username,password).then(res =>{\r\n            message = res.data.message\r\n            role = res.data.role\r\n            if(message === \"Success\"){\r\n                localStorage.setItem(\"token\",\"shamsh\")\r\n                localStorage.setItem(\"name\",username)\r\n                localStorage.setItem(\"role\",role)\r\n                this.setState({\r\n                    loggedIn: true\r\n                })\r\n            }else{\r\n                alert(message)\r\n            }\r\n        })\r\n        \r\n    }\r\n    render() {\r\n        if(this.state.loggedIn){\r\n            return <Redirect to=\"/Admin\"/>\r\n        }\r\n        return (\r\n            <div>\r\n                <h1>Login Form</h1>\r\n                <form>\r\n                    <label>User Name:</label>\r\n                    <input type=\"text\" name= \"username\" placeholder=\"username\" value={this.state.username} onChange={this.onChange}></input><br/>\r\n                    <label>Password:</label>\r\n                    <input type=\"password\" placeholder=\"password\" name=\"password\" value={this.state.password} onChange={this.onChange}></input><br/>\r\n                    <button name=\"Login\" onClick={this.LoginForm}>Login</button>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default login;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Logout extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        localStorage.removeItem(\"token\")\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>You hae successfully Lougged out</h1>\r\n                <Link to=\"/\">Log in again</Link>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Logout;","import React, { Component } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nclass Admin extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        let loggedIn = true\r\n        const token = localStorage.getItem(\"token\")\r\n        if(token === null){\r\n            loggedIn = false\r\n        }\r\n        this.state ={\r\n            loggedIn\r\n        }\r\n    }\r\n    render() {\r\n        if(this.state.loggedIn === false){\r\n            return <Redirect to=\"/\"/>\r\n        }\r\n        return (\r\n            <div>\r\n                <h1>Hello {localStorage.getItem(\"name\")}, This is First Page !!!!</h1>\r\n                <Link to=\"/SecondPage\">Go to second page</Link><br/>\r\n                <Link to=\"/Logout\">Logout</Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Admin;","import React, { Component } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nclass SecondPage extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        let loggedIn = true\r\n        const token = localStorage.getItem(\"token\")\r\n        if(token === null){\r\n            loggedIn = false\r\n        }\r\n        this.state ={\r\n            loggedIn\r\n        }\r\n    }\r\n    render() {\r\n        if(this.state.loggedIn === false){\r\n            return <Redirect to=\"/\"/>\r\n        }\r\n        return (\r\n            <div>\r\n                <h1>Hello {localStorage.getItem(\"name\")}, This is second page !!!!</h1>\r\n                <Link to=\"/Admin\">Go to First page</Link><br/>\r\n                <Link to=\"/ThirdPage\">Go to Third page</Link><br/>\r\n                <Link to=\"/Logout\">Logout</Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SecondPage;","import React, { Component } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\n\r\nclass ThirdPage extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        let loggedIn = true\r\n        const token = localStorage.getItem(\"token\")\r\n        if(token === null){\r\n            loggedIn = false\r\n        }\r\n        this.state ={\r\n            loggedIn\r\n        }\r\n    }\r\n    render() {\r\n        if(this.state.loggedIn === false){\r\n            return <Redirect to=\"/\"/>\r\n        }else if(localStorage.getItem(\"role\") !== 'admin'){\r\n            alert('Only Admin can see this page');\r\n            return <Redirect to=\"/SecondPage\"/>\r\n        }\r\n        return (\r\n            <div>\r\n                <h1>Hello {localStorage.getItem(\"name\")}, This is Admin page and only Authorize people can see !!!!</h1>\r\n                <Link to=\"/Admin\">Go to First page</Link><br/>\r\n                <Link to=\"/SecondPage\">Go to Second page</Link><br/>\r\n                <Link to=\"/Logout\">Logout</Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ThirdPage;","import React from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport Login from './component/Login';\nimport Logout from './component/Logout';\nimport Admin from './component/Admin';\nimport SecondPage from './component/SecondPage';\nimport ThirdPage from './component/ThirdPage';\n\nfunction App() {\n  return (\n    <div>\n      <Router>\n        <Switch>\n          <Route exact path='/' component={Login}></Route>\n          <Route path='/Admin' component={Admin}></Route>\n          <Route path='/Logout' component={Logout}></Route>\n          <Route path='/SecondPage' component={SecondPage}></Route>\n          <Route path='/ThirdPage' component={ThirdPage}></Route>\n        </Switch>\n      </Router>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}